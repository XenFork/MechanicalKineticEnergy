import java.nio.channels.Channels
import java.nio.channels.ReadableByteChannel
import java.nio.file.Files
import java.time.LocalDateTime

plugins {
    id 'java'
}

group = 'org.overrun'
version = '1.0-SNAPSHOT'

ext {
    MC_VERSION = '1.19.3'
    SPIGOT_VERSION = 'R0.1-SNAPSHOT'
    JAVA_PATH = 'java'
    SHELL_NAME = 'mkeRunTestSever'
}

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    compileOnly "org.spigotmc:spigot-api:${MC_VERSION}-${SPIGOT_VERSION}"
    //https://download.getbukkit.org/spigot/spigot-1.19.3.jar
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

static void downloadUsingStream(File file, String urlString) {
    URL url = new URL(urlString)
    BufferedInputStream bis = new BufferedInputStream(url.openStream())
    FileOutputStream fis = new FileOutputStream(file)
    byte[] buffer = new byte[1024]
    int count = 0;
    while ((count = bis.read(buffer, 0, 1024)) != -1) {
        fis.write(buffer, 0, count)
    }
    fis.close()
    bis.close()
}

Task copy = tasks.create(name: "copy",type: Copy, group: "Mechanical Kinetic Energy") {
    from 'build/libs'
    into 'build/run/plugins'
}

Task download = tasks.create(name: "downloadServerCore", group: "Mechanical Kinetic Energy") {
    final File name = file("build/run")
    if (!name.exists()) name.mkdirs()
    final def urlPreName = "https://download.getbukkit.org/spigot/"//spigot-1.19.3.jar
    final def jarName = "spigot-${MC_VERSION}.jar"
    final File path = new File(name, jarName)
    final File bat = new File(name, "${SHELL_NAME}.bat")
    final File sh = new File(name, "${SHELL_NAME}.sh")
    final def java_path = "${JAVA_PATH}".toString();
    if (!path.exists()) {
        downloadUsingNIO(path, urlPreName + jarName)
    }
    createRunBat(bat, jarName, java_path)
    createRunSh(sh, jarName, java_path)
}
//task copy(type: Copy ,group: "Mechanical Kinetic Energy") {
//    from 'build/libs'
//    into 'build/run/plugins'
//}

Task run = tasks.create(name:"runServer",type: Exec, group: "Mechanical Kinetic Energy") {
    workingDir "$projectDir/build/run"
    File name = new File(getWorkingDir(), "eula.txt")
    if (!name.exists()) {
        name.createNewFile()
        BufferedWriter bw = new BufferedWriter(new FileWriter(name))
        bw.write("#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).")
        bw.newLine()
        LocalDateTime time = LocalDateTime.now()
        String date = String.format("#Thu %s %02d %02d:%02d:%02d CST %d", getMonth(time.getMonth().getValue()), time.getDayOfMonth() ,time.getHour(),time.getMinute(), time.getSecond() , time.getYear())
        bw.write(date)
        bw.newLine()
        bw.write("eula=true")
        bw.newLine()
        bw.close()
    }
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
        commandLine 'cmd', '/c', "${SHELL_NAME}.bat"
    } else {
        commandLine 'sh', '-c', "${SHELL_NAME}.sh"
    }
}
run.dependsOn(build)
run.dependsOn(download)
run.dependsOn(copy)

Task build = tasks.build
build.dependsOn(download)
build.dependsOn(copy)

static String getMonth(int i) {
    switch (i) {
        case 1:
            return  "Jan."
        case 2:
            return  "Feb."
        case 3:
            return "Mar."
        case 4:
            return "Apr."
        case 5:
            return "May."
        case 6:
            return "Jun."
        case 7:
            return "Jul."
        case 8:
            return "Aug."
        case 9:
            return "Sept."
        case 10:
            return "Oct."
        case 11:
            return "Nov."
        case 12:
            return "Dec."
    }
}

static void downloadUsingNIO(File file, String urlString) {
    URL url = new URL(urlString)
    ReadableByteChannel rbc = Channels.newChannel(url.openStream())
    FileOutputStream fos = new FileOutputStream(file)
    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE)
    fos.close()
    rbc.close()
}

static void createRunBat(File file, String jarName, String javaPath) {
    if (!file.exists()) file.createNewFile()
    BufferedWriter bw = new BufferedWriter(new FileWriter(file))
    bw.write("@echo off")
    bw.newLine()
    bw.write( javaPath + " -Xms1g -Xmx1g -jar " + jarName)
    bw.close()
}

static void createRunSh(File file, String jarName, String javaPath) {
    if (!file.exists()) file.createNewFile();
    BufferedWriter bw = new BufferedWriter(new FileWriter(file))
    bw.write("#!/bin/bash")
    bw.newLine()
    bw.write(javaPath + " -Xms1g -Xmx1g -jar " + jarName)
    bw.newLine()
    bw.close()
}


