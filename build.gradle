import java.time.LocalDateTime

plugins {
    id 'java'
    id 'antlr'
}

apply from: './MKEGradle/down.gradle'

group = 'org.overrun'
version = '1.0-SNAPSHOT'

ext {
    MC_VERSION = '1.19.3'
    SPIGOT_VERSION = 'R0.1-SNAPSHOT'
    JAVA_PATH = 'java'
    SHELL_NAME = 'mkeRunTestSever'
    HMCL_VERSION= '3.5.3.228'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    implementation("org.jetbrains:annotations:23.1.0")
    antlr('org.antlr:antlr4:4.11.1')
    compileOnly "org.spigotmc:spigot-api:${MC_VERSION}-${SPIGOT_VERSION}"
    compileOnly "org.spigotmc:spigot:${MC_VERSION}-${SPIGOT_VERSION}"
}

final def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility =
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.create(name:"copyLibs",type: Copy, group: "Mechanical Kinetic Energy") {
    from 'build/libs'
    into 'build/run/plugins'
}

tasks.create(name:"buildTools", dependsOn: [downloadBuildTools],type:Exec, group: "Mechanical Kinetic Energy") {
    workingDir "$projectDir/build/buildT"
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
        commandLine 'cmd', '/c', "${SHELL_NAME}.bat"
    } else {
        commandLine 'sh', '-c', "${SHELL_NAME}.sh"
    }
}

tasks.create(name:"runServer",dependsOn: [build, downloadServerCore, copyLibs],type: Exec, group: "Mechanical Kinetic Energy") {
    workingDir "$projectDir/build/run"
    File name = new File(getWorkingDir(), "eula.txt")
    if (!name.exists()) {
        name.createNewFile()
        BufferedWriter bw = new BufferedWriter(new FileWriter(name))
        bw.write("#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).")
        bw.newLine()
        LocalDateTime time = LocalDateTime.now()
        String date = String.format("#Thu %s %02d %02d:%02d:%02d CST %d", getMonth(time.getMonth().getValue()), time.getDayOfMonth() ,time.getHour(),time.getMinute(), time.getSecond() , time.getYear())
        bw.write(date)
        bw.newLine()
        bw.write("eula=true")
        bw.newLine()
        bw.close()
    }
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
        commandLine 'cmd', '/c', "${SHELL_NAME}.bat"
    } else {
        commandLine 'sh', '-c', "${SHELL_NAME}.sh"
    }
}

tasks.create(name:"runClient",dependsOn: [downloadClient],type: Exec, group: "Mechanical Kinetic Energy") {
    workingDir "$projectDir/build/client"
    if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
        commandLine 'cmd', '/c', "${SHELL_NAME}.bat"
    } else {
        commandLine 'sh', '-c', "${SHELL_NAME}.sh"
    }
}

Task build = tasks.build
build.dependsOn(downloadServerCore)
build.dependsOn(copyLibs)

static String getMonth(int i) {
    switch (i) {
        case 1:
            return  "Jan."
        case 2:
            return  "Feb."
        case 3:
            return "Mar."
        case 4:
            return "Apr."
        case 5:
            return "May."
        case 6:
            return "Jun."
        case 7:
            return "Jul."
        case 8:
            return "Aug."
        case 9:
            return "Sept."
        case 10:
            return "Oct."
        case 11:
            return "Nov."
        case 12:
            return "Dec."
    }
}


